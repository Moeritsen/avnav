import java.text.SimpleDateFormat

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

}

apply plugin: 'java'

def downloads=[
        //those urls must fit toe the names in installer/setup.iss
        'https://www.python.org/ftp/python/2.7.10/python-2.7.10.msi',
        'http://download.gisinternals.com/sdk/downloads/release-1500-gdal-1-11-mapserver-6-4/gdal-111-1500-core.msi',
        'http://download.gisinternals.com/sdk/downloads/release-1500-gdal-1-11-mapserver-6-4/GDAL-1.11.4.win32-py2.7.msi',
        'https://pypi.python.org/packages/11/5d/df6328b510f150c673414b65550c48415fae1a9dc42eec7ab2afa06b4bb6/Pillow-3.0.0-cp27-none-win32.whl',
        'https://pypi.python.org/packages/df/c9/d9da7fafaf2a2b323d20eee050503ab08237c16b0119c7bbf1597d53f793/pyserial-2.7.tar.gz'
]

task buildViewer(type: org.gradle.api.tasks.GradleBuild){
    dir=file("$projectDir/../viewer")
    tasks=["release"]
}

project.ext.avnavVersion=null
task pkgVersion {
    doFirst{	
	    if (!project.hasProperty('packageVersion')) {
		SimpleDateFormat f = new SimpleDateFormat('yyyyMMdd')
		project.avnavVersion=f.format(new Date())
	    } else {
		project.avnavVersion = packageVersion
	    }
	}
}

def versionFile=file("$projectDir/AvChartConvert/AvChartConvert/Properties/AssemblyInfo.cs")
def versionSave=file("${versionFile}.save")
task updateVersionFiles{
    dependsOn pkgVersion
    doFirst{
        assert versionFile.exists(),"missing version file $versionFile"
        def lines=[]
        def windows_version_string=project.avnavVersion.replaceAll(/(....)(..)(..)/,'$1.$2.$3')
        println "updating $versionFile with version $windows_version_string"
        versionFile.withReader {rd->
            rd.readLines().each{String line->
                line=line.replaceAll(/^ *\[assembly: AssemblyVersion.*/,"[assembly: AssemblyVersion(\""+windows_version_string+"\")]")
                line=line.replaceAll(/^ *\[assembly: AssemblyFileVersion.*/,"[assembly: AssemblyFileVersion(\""+windows_version_string+"\")]")
                lines.add(line)
            }
        }
        if (! versionSave.exists()){
            versionFile.renameTo(versionSave)
        }
        else {
            versionFile.delete()
        }
        versionFile.withWriter {wr->
            lines.each{
                wr.println(it)
            }
        }
    }
}
File libdir=file('installer/library')
task download{
    doFirst{
        if (!libdir.exists()) libdir.mkdirs()
        downloads.each{ dl->
            def name=dl.replaceAll('.*/','')
            File localFile=new File(libdir,name)
            if (! localFile.exists()){
                logger.info("downloading $dl to $localFile")
                new URL(dl).withInputStream{ is -> localFile.withOutputStream{ it << is }}
            }
            else{
                logger.info("$localFile already exists")
            }

        }
    }

}

task runBuild(type: org.gradle.api.tasks.Exec){
    commandLine=['cmd','/C','build.cmd']
    dependsOn updateVersionFiles,buildViewer,download
    doFirst{
        if (! project.buildDir.isDirectory()) project.buildDir.mkdirs()
    }

}

task release{
    dependsOn buildViewer,updateVersionFiles,runBuild
}
